// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YoHeSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreData
import CoreTelephony
import Foundation
import Foundation.NSURLRequest
import Photos
import PhotosUI
import QuartzCore
import Swift
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
@_exported import YoHeSDK
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers open class YoHe : ObjectiveC.NSObject {
  @objc public static let sdk: YoHeSDK.YoHe
  @objc final public let version: Swift.String
  @objc weak open var campaignDelegate: (any YoHeSDK.YoHeCampaignDelegate)?
  @objc weak open var logDelegate: (any YoHeSDK.YoHeLogDelegate)?
  @objc open var settings: YoHeSDK.YoHeSettings
  @objc open var theme: YoHeSDK.YoHeTheme
  @objc open var properties: [Swift.String : Any]
  @objc public static func setup(appID: Swift.String, settings: YoHeSDK.YoHeSettings, campaignDelegate: (any YoHeSDK.YoHeCampaignDelegate)? = nil, logDelegate: (any YoHeSDK.YoHeLogDelegate)? = nil)
  @objc open func startCampaign(eventName: Swift.String)
  @objc open func stopCampaign()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class YoHeSettings : ObjectiveC.NSObject {
  @objc open var globalDelayTimer: Swift.Int
  @objc open var closeOnSwipe: Swift.Bool
  @objc open var debugEnabled: Swift.Bool
  @objc open var fieldsEventEnabled: Swift.Bool
  @objc open var retryTimeout: Swift.Double
  @objc open var retryCount: Swift.Int
  @objc open var socketTimeout: Swift.Double
  @objc open var slideInUiBlocked: Swift.Bool
  @objc open var slideInUiBlackoutColor: Swift.String?
  open var slideInUiBlackoutOpacity: Swift.Int?
  open var slideInUiBlackoutBlur: Swift.Int?
  @objc open var popupUiBlackoutColor: Swift.String?
  open var popupUiBlackoutOpacity: Swift.Int?
  open var popupUiBlackoutBlur: Swift.Int?
  @objc open var endpoint: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class Settings : ObjectiveC.NSObject {
  @objc open var globalDelayTimer: Swift.Int
  @objc open var closeOnSwipe: Swift.Bool
  @objc open var debugEnabled: Swift.Bool
  @objc open var fieldsEventEnabled: Swift.Bool
  @objc open var retryTimeout: Swift.Double
  @objc open var retryCount: Swift.Int
  @objc open var socketTimeout: Swift.Double
  @objc open var slideInUiBlocked: Swift.Bool
  @objc open var slideInUiBlackoutColor: Swift.String?
  open var slideInUiBlackoutOpacity: Swift.Int?
  open var slideInUiBlackoutBlur: Swift.Int?
  @objc open var popupUiBlackoutColor: Swift.String?
  open var popupUiBlackoutOpacity: Swift.Int?
  open var popupUiBlackoutBlur: Swift.Int?
  @objc open var endpoint: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.String {
  public var argb2rgba: Swift.String? {
    get
  }
}
@objc extension UIKit.UIColor {
  @objc convenience dynamic public init(hex3: Swift.UInt16, alpha: CoreFoundation.CGFloat = 1)
  @objc convenience dynamic public init(hex4: Swift.UInt16)
  @objc convenience dynamic public init(hex6: Swift.UInt32, alpha: CoreFoundation.CGFloat = 1)
  @objc convenience dynamic public init(hex8: Swift.UInt32)
  @objc convenience dynamic public init(rgba_throws rgba: Swift.String) throws
  @objc convenience dynamic public init(_ rgba: Swift.String, defaultColor: UIKit.UIColor = UIColor.clear)
  @objc dynamic public func hexStringThrows(_ includeAlpha: Swift.Bool = true) throws -> Swift.String
  @objc dynamic public func hexString(_ includeAlpha: Swift.Bool = true) -> Swift.String
}
@objc @_inheritsConvenienceInitializers @objcMembers open class YoHeTheme : ObjectiveC.NSObject {
  @objc open var bgColor: UIKit.UIColor
  @objc open var iconColor: UIKit.UIColor
  @objc open var text01Color: UIKit.UIColor
  @objc open var text02Color: UIKit.UIColor
  @objc open var text03Color: UIKit.UIColor
  @objc open var mainColor: UIKit.UIColor
  @objc open var errorColorPrimary: UIKit.UIColor
  @objc open var errorColorSecondary: UIKit.UIColor
  @objc open var inputBgColor: UIKit.UIColor
  @objc open var inputBorderColor: UIKit.UIColor
  @objc open var controlBgColor: UIKit.UIColor
  @objc open var controlBgColorActive: UIKit.UIColor
  @objc open var controlIconColor: UIKit.UIColor
  @objc open var btnBgColor: UIKit.UIColor
  @objc open var btnBgColorActive: UIKit.UIColor
  @objc open var btnTextColor: UIKit.UIColor
  @objc open var btnBorderRadius: CoreFoundation.CGFloat
  @objc open var formBorderRadius: CoreFoundation.CGFloat
  @objc open var fontH1: UIKit.UIFont
  @objc open var fontH2: UIKit.UIFont
  @objc open var fontP1: UIKit.UIFont
  @objc open var fontP2: UIKit.UIFont
  @objc open var fontBtn: UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
}
extension CoreData.NSManagedObjectContext {
  @discardableResult
  public func saveIfNeeded() throws -> Swift.Bool
}
public struct NetworkSettings {
}
@objc public protocol FeedbackCampaignDelegate {
  @objc func campaignDidLoad(success: Swift.Bool)
  @objc func campaignDidReceiveError(errorString: Swift.String)
  @objc func campaignDidShow(eventName: Swift.String)
  @objc func campaignDidClose(eventName: Swift.String)
  @objc func campaignDidTerminate(eventName: Swift.String, terminatedPage: Swift.Int, totalPages: Swift.Int)
  @objc func campaignDidSend(campaignId: Swift.String)
  @objc func campaignDidAnswered(campaignId: Swift.String, answers: [Swift.String : Any])
}
@objc public protocol FeedbackLogDelegate {
  @objc func logDidReceive(message: Swift.String)
}
@objc public protocol YoHeCampaignDelegate : YoHeSDK.FeedbackCampaignDelegate {
  @objc func campaignDidLoad(success: Swift.Bool)
  @objc func campaignDidReceiveError(errorString: Swift.String)
  @objc func campaignDidShow(eventName: Swift.String)
  @objc func campaignDidClose(eventName: Swift.String)
  @objc func campaignDidTerminate(eventName: Swift.String, terminatedPage: Swift.Int, totalPages: Swift.Int)
  @objc func campaignDidSend(campaignId: Swift.String)
  @objc func campaignDidAnswered(campaignId: Swift.String, answers: [Swift.String : Any])
}
@objc public protocol YoHeLogDelegate : YoHeSDK.FeedbackLogDelegate {
  @objc func logDidReceive(message: Swift.String)
}
